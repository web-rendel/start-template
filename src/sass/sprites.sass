// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$add-button-name: 'add_button'
$add-button-x: 92px
$add-button-y: 36px
$add-button-offset-x: -92px
$add-button-offset-y: -36px
$add-button-width: 6px
$add-button-height: 10px
$add-button-total-width: 98px
$add-button-total-height: 84px
$add-button-image: '../img/sprite.png'
$add-button: (92px, 36px, -92px, -36px, 6px, 10px, 98px, 84px, '../img/sprite.png', 'add_button', )
$arrow-right-link-name: 'arrow_right_link'
$arrow-right-link-x: 24px
$arrow-right-link-y: 68px
$arrow-right-link-offset-x: -24px
$arrow-right-link-offset-y: -68px
$arrow-right-link-width: 16px
$arrow-right-link-height: 13px
$arrow-right-link-total-width: 98px
$arrow-right-link-total-height: 84px
$arrow-right-link-image: '../img/sprite.png'
$arrow-right-link: (24px, 68px, -24px, -68px, 16px, 13px, 98px, 84px, '../img/sprite.png', 'arrow_right_link', )
$b-reset-ico-name: 'b_reset_ico'
$b-reset-ico-x: 68px
$b-reset-ico-y: 36px
$b-reset-ico-offset-x: -68px
$b-reset-ico-offset-y: -36px
$b-reset-ico-width: 16px
$b-reset-ico-height: 19px
$b-reset-ico-total-width: 98px
$b-reset-ico-total-height: 84px
$b-reset-ico-image: '../img/sprite.png'
$b-reset-ico: (68px, 36px, -68px, -36px, 16px, 19px, 98px, 84px, '../img/sprite.png', 'b_reset_ico', )
$button-search-icon-name: 'button_search_icon'
$button-search-icon-x: 0px
$button-search-icon-y: 68px
$button-search-icon-offset-x: 0px
$button-search-icon-offset-y: -68px
$button-search-icon-width: 16px
$button-search-icon-height: 16px
$button-search-icon-total-width: 98px
$button-search-icon-total-height: 84px
$button-search-icon-image: '../img/sprite.png'
$button-search-icon: (0px, 68px, 0px, -68px, 16px, 16px, 98px, 84px, '../img/sprite.png', 'button_search_icon', )
$cart-ico-name: 'cart_ico'
$cart-ico-x: 68px
$cart-ico-y: 0px
$cart-ico-offset-x: -68px
$cart-ico-offset-y: 0px
$cart-ico-width: 30px
$cart-ico-height: 28px
$cart-ico-total-width: 98px
$cart-ico-total-height: 84px
$cart-ico-image: '../img/sprite.png'
$cart-ico: (68px, 0px, -68px, 0px, 30px, 28px, 98px, 84px, '../img/sprite.png', 'cart_ico', )
$convenience-ico2-name: 'convenience_ico2'
$convenience-ico2-x: 0px
$convenience-ico2-y: 0px
$convenience-ico2-offset-x: 0px
$convenience-ico2-offset-y: 0px
$convenience-ico2-width: 60px
$convenience-ico2-height: 60px
$convenience-ico2-total-width: 98px
$convenience-ico2-total-height: 84px
$convenience-ico2-image: '../img/sprite.png'
$convenience-ico2: (0px, 0px, 0px, 0px, 60px, 60px, 98px, 84px, '../img/sprite.png', 'convenience_ico2', )
$spritesheet-width: 98px
$spritesheet-height: 84px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($add-button, $arrow-right-link, $b-reset-ico, $button-search-icon, $cart-ico, $convenience-ico2, )
$spritesheet: (98px, 84px, '../img/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
